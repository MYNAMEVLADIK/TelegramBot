package com.example.telegrembot.listener;

import com.example.telegrembot.service.NotificationTaskService;
import com.pengrad.telegrambot.BotUtils;
import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.request.SendMessage;
import com.pengrad.telegrambot.response.SendResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collections;
import java.util.Objects;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class TelegramBotUpdatesListenerTest {

    @Mock
    private TelegramBot telegramBot;

    @Mock
    private NotificationTaskService notificationTaskService;

    @InjectMocks
    private TelegramBotUpdateListener telegramBotUpdateListener;

    @Test
    public void initTest() {
        telegramBotUpdateListener.init();
    }

    @Test
    public void handleStartTest() throws URISyntaxException, IOException {
        checkResponse("/start", """
                üî•üî•üî•–ü—Ä–∏–≤–µ—Çüëã, –º–µ–Ω—è –∑–æ–≤—É—Ç –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫üïí, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ç–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏üòÅ, –∞ –∏–º–µ–Ω–Ω–æ —Å —Ç–µ–º —á—Ç–æ–±—ã —Ç—ã –∏—Ö –Ω–µ –∑–∞–±—ã–ª!
                –î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –¥–ª—è –º–µ–Ω—è —Ç–æ—á–Ω—É—é –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {12.12.2222 –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ –î—Ä—É–≥–∞!}
                –ê —è –Ω–µ –¥–∞–º —Ç–µ–±–µ –ø—Ä–æ –Ω–µ–≥–æ –∑–∞–±—ã—Ç—åüòâ!üî•üî•üî•
                """);
    }

    @Test
    public void handleIncorrectInputDateTimeFormatTest() throws URISyntaxException, IOException {
        checkResponse("35.50.2023 30:30 –ü—Ä–∏–Ω–µ—Å—Ç–∏ –∫–æ–Ω—Ñ–µ—Ç", "‚ö†Ô∏è–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏/–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏!‚ö†Ô∏è");
    }

    @Test
    public void handleIncorrectInputFormatTest() throws URISyntaxException, IOException {
        checkResponse("20.12.2023 20:20 Vlad", "‚ö†Ô∏è–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!‚ö†Ô∏è");
    }

    @Test
    public void handleCorrectInputFormatTest() throws URISyntaxException, IOException {
        checkResponse("20.12.2023 20:40 –ü—Ä–∏–Ω–µ—Å—Ç–∏ –∫–æ–Ω—Ñ–µ—Ç", "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!" +
                "–Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –µ–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å!");
    }

    private void checkResponse(String input, String expectedOutput) throws URISyntaxException, IOException {
        String json = Files.readString(
                Path.of(Objects.requireNonNull(TelegramBotUpdatesListenerTest.class.getResource("danger.json")).toURI()));
        Update updateWithIncorrectDateTime = BotUtils.fromJson(
                json.replace("%text%", input), Update.class);
        SendResponse sendResponse = BotUtils.fromJson(
                "{'ok': true}", SendResponse.class);

        when(telegramBot.execute(any())).thenReturn(sendResponse);

        telegramBotUpdateListener.process(Collections.singletonList(updateWithIncorrectDateTime));

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        Mockito.verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();

        Assertions.assertEquals(actual.getParameters().get("chat_id"),
                updateWithIncorrectDateTime.message().chat().id());
        Assertions.assertEquals(actual.getParameters().get("text"),
                expectedOutput);
    }
}
